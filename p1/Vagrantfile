# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "debian/bookworm64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  # #   # Display the VirtualBox GUI when booting the machine
  #   # vb.gui = true
  #   vb.name = "main_vm"
  #   # vb.hostname = "Server"
  # #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  #   vb.cpus = 1
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  # Configure the root password
  # config.vm.provision "shell", inline: <<-SHELL
  #   echo 'root:123' | chpasswd
  # SHELL

  # Create a new user and set its password
  # config.vm.provision "shell", inline: <<-SHELL
  #   useradd -m -s /bin/bash pepito
  #   echo 'pepito:123' | chpasswd
  #   echo 'pepito ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers.d/pepito
  # SHELL

  # # Sync a folder between host and guest
  # # config.vm.synced_folder "./data", "/vagrant_data"

  # # Provisioner to ensure the synced folder exists on the guest
  # config.vm.provision "shell", inline: <<-SHELL
  #   mkdir -p /vagrant_data
  # SHELL

  config.vm.define "mflores" do |control|
    control.vm.hostname = "mfloresS"
    control.vm.network "private_network", ip: "192.168.56.110", hostname: true
    control.vm.provider "virtualbox" do |v|
      v.memory = "1024"
      v.cpus = 1
    end
    # config.vm.provision "shell", inline: <<-SHELL
    #   apt-get update
    #   apt-get install -y curl
    # SHELL
    control.vm.provision "file", source: "./confs/.env", destination: "/home/vagrant/.env"
    control.vm.provision "shell", path: './scripts/server.sh'
  end

  config.vm.define "ljospin" do |control|
    control.vm.hostname = "ljospinSW"
    control.vm.network "private_network", ip: "192.168.56.111", hostname: true
    control.vm.provider "virtualbox" do |v|
      v.memory = "1024"
      v.cpus = 1
    end
    control.vm.provision "file", source: "./confs/.env", destination: "/home/vagrant/.env"
    control.vm.provision "shell", path: './scripts/agent.sh'
  end
end
